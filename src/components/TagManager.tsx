import React, { useState, useEffect, useRef } from 'react';
import Tag from './Tag';
import Icon from '../icons';
import { Tag as TagModel } from '../models/TagModels';

interface TagManagerProps {
  tags: TagModel[];
  selectedTags?: string[];
  onTagSelect?: (tagId: string) => void;
  onTagCreate?: (tagName: string, color?: string) => void;
  onTagDelete?: (tagId: string) => void;
  onTagEdit?: (tagId: string, updates: Partial<TagModel>) => void;
  showControls?: boolean;
  className?: string;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –≤—ã–±–∏—Ä–∞—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Ç–µ–≥–∏
 */
const TagManager: React.FC<TagManagerProps> = ({
  tags,
  selectedTags = [],
  onTagSelect,
  onTagCreate,
  onTagDelete,
  onTagEdit,
  showControls = true,
  className = ''
}) => {
  const [newTagName, setNewTagName] = useState<string>('');
  const [newTagColor, setNewTagColor] = useState<string>('#3498db');
  const [isCreating, setIsCreating] = useState<boolean>(false);
  const [searchQuery, setSearchQuery] = useState<string>('');
  const inputRef = useRef<HTMLInputElement>(null);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredTags = tags.filter(tag => 
    tag.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
  const handleCreateTag = () => {
    if (newTagName.trim() && onTagCreate) {
      onTagCreate(newTagName.trim(), newTagColor);
      setNewTagName('');
      setIsCreating(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleCreateTag();
    } else if (e.key === 'Escape') {
      setIsCreating(false);
      setNewTagName('');
    }
  };

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è
  useEffect(() => {
    if (isCreating && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isCreating]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
  const generateRandomColor = () => {
    const colors = [
      '#3498db', // —Å–∏–Ω–∏–π
      '#2ecc71', // –∑–µ–ª–µ–Ω—ã–π
      '#e74c3c', // –∫—Ä–∞—Å–Ω—ã–π
      '#f39c12', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
      '#9b59b6', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
      '#1abc9c', // –±–∏—Ä—é–∑–æ–≤—ã–π
      '#34495e', // —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
      '#e67e22', // –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
      '#16a085', // –∑–µ–ª–µ–Ω–æ-–±–∏—Ä—é–∑–æ–≤—ã–π
      '#d35400', // —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
      '#27ae60', // –∏–∑—É–º—Ä—É–¥–Ω—ã–π
      '#2980b9', // —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
      '#8e44ad', // —Ç–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
      '#f1c40f', // –∂–µ–ª—Ç—ã–π
    ];
    
    return colors[Math.floor(Math.random() * colors.length)];
  };

  return (
    <div className={`tag-manager ${className}`}>
      {/* –ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤ */}
      {tags.length > 0 && (
        <div className="tag-search" style={{
          marginBottom: '10px',
          position: 'relative'
        }}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —Ç–µ–≥–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={{
              width: '100%',
              padding: '8px 30px 8px 8px',
              borderRadius: '4px',
              border: '1px solid #ddd',
              fontSize: '14px'
            }}
          />
          <Icon 
            type="search" 
            size={16} 
            color="#999"
            style={{
              position: 'absolute',
              right: '10px',
              top: '50%',
              transform: 'translateY(-50%)'
            }}
          />
        </div>
      )}
      
      {/* –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ */}
      <div className="tags-list" style={{
        marginBottom: '10px',
        maxHeight: '200px',
        overflowY: 'auto'
      }}>
        {filteredTags.length > 0 ? (
          filteredTags.map(tag => (
            <Tag
              key={tag.id}
              id={tag.id}
              name={tag.name}
              color={tag.color || '#3498db'}
              selected={selectedTags.includes(tag.id)}
              onClick={onTagSelect ? () => onTagSelect(tag.id) : undefined}
              onRemove={onTagDelete ? () => onTagDelete(tag.id) : undefined}
              size="medium"
            />
          ))
        ) : searchQuery ? (
          <div style={{ 
            padding: '10px', 
            color: '#666', 
            textAlign: 'center',
            fontSize: '14px'
          }}>
            –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : tags.length === 0 ? (
          <div style={{ 
            padding: '10px', 
            color: '#666', 
            textAlign: 'center',
            fontSize: '14px'
          }}>
            –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
          </div>
        ) : null}
      </div>
      
      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞ */}
      {showControls && (
        <div className="tag-create">
          {isCreating ? (
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '8px',
              padding: '10px',
              backgroundColor: '#f5f5f5',
              borderRadius: '4px'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <input
                  ref={inputRef}
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  onKeyDown={handleKeyDown}
                  style={{
                    flex: 1,
                    padding: '8px',
                    borderRadius: '4px',
                    border: '1px solid #ddd',
                    fontSize: '14px'
                  }}
                />
                <input
                  type="color"
                  value={newTagColor}
                  onChange={(e) => setNewTagColor(e.target.value)}
                  style={{
                    width: '30px',
                    height: '30px',
                    padding: '0',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                />
                <button
                  onClick={() => setNewTagColor(generateRandomColor())}
                  style={{
                    padding: '6px',
                    backgroundColor: '#fff',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                  title="–°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç"
                >
                  üé≤
                </button>
              </div>
              
              <div style={{ display: 'flex', gap: '8px' }}>
                <button
                  onClick={handleCreateTag}
                  disabled={!newTagName.trim()}
                  style={{
                    flex: 1,
                    padding: '8px',
                    backgroundColor: newTagName.trim() ? '#3498db' : '#ccc',
                    color: '#fff',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: newTagName.trim() ? 'pointer' : 'not-allowed',
                    fontSize: '14px'
                  }}
                >
                  –°–æ–∑–¥–∞—Ç—å
                </button>
                <button
                  onClick={() => {
                    setIsCreating(false);
                    setNewTagName('');
                  }}
                  style={{
                    padding: '8px',
                    backgroundColor: '#f1f1f1',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          ) : (
            <button
              onClick={() => setIsCreating(true)}
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '100%',
                padding: '8px',
                backgroundColor: '#f1f1f1',
                border: '1px solid #ddd',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '14px',
                gap: '6px'
              }}
            >
              <Icon type="tag" size={14} />
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default TagManager;